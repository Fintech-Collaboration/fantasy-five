import pickle
import hvplot.pandas

import pandas    as pd
import numpy     as np
import holoviews as hv

import matplotlib.pyplot as plt
import plotly.graph_objs as go
import plotly.offline    as py

from plotly.offline import init_notebook_mode
from fbprophet      import Prophet
from pathlib        import Path
from bokeh.embed    import components

hv.extension('bokeh')


def dmac(df, short=50, long=100):
    df["SMA_short"] = df["price_close"].rolling(window=short).mean()
    df["SMA_long"]  = df["price_close"].rolling(window=long ).mean()
    df["signal"]    = 0.0

    df["signal"][short:] = np.where(
        df["SMA_short"][short:] > df["SMA_long"][short:], 1.0, 0.0
    )

    df["entry_exit"] = df["signal"].diff()

    return df


def ohlc_forecast(name="Bitcoin", ticker="BTC", col="price_close"):
    """
    sr_ucb_project02_prophet_cryptoforecast_aave.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
    https://colab.research.google.com/drive/1zJIeUQdU7XG1wSND6siFX6xQ54C6FyV1

    # UCB PROJECT 02: Forecasting Crypto

    ## Install and import the required libraries and dependencies
    """

    BASE_DIR = Path(__file__).resolve().parent.parent

    TITLE_DICT = {
        "price_close": "Market Open",
        "price_high":  "Daily High",
        "price_low":   "Daily Low",
        "price_close": "Market Close",
    }

    name   = name.lower()
    ticker = ticker.lower()

    # Variables
    filename         = f"{BASE_DIR}/data/{name}_5_year.csv"
    forecast_period  = 90
    index_column     = ticker + "_start_date"
    x_val            = ticker + "_start_date.year"
    y_val            = ticker + "_start_date.quarter"
    title_heatmap = f"Transaction Volume Heatmap For: {TITLE_DICT[col]}"

    # Set the "Date" column as the Datetime Index.
    df_crypto = pd.read_csv(
    filename, 
    index_col=index_column, 
    parse_dates = True, 
    infer_datetime_format = True
    )

    # Reserve a DF with no Index, if needed
    df_crypto_noIndex = df_crypto.reset_index()
    df_crypto_noIndex.head()

    # Separate out the coulmns that you are interested in ... 
    df_crypto_index = df_crypto[[col]]

    # Do we have any nulls?
    df_crypto_index.isnull().sum()

    """ ANALYSIS """
    # Price Trends
    df_crypto_index.plot(
        figsize=(20,10),
        xlabel="Date",
        ylabel=" ".join([s.capitalize() for s in f"{col}".split(" ")]),
        title=f"{TITLE_DICT[col].split(' ')[0]} Price Trend"
    )

    # HeatMap for Crypto
    hv.extension('bokeh')

    heat_plt = df_crypto_index.hvplot.heatmap(
        x=x_val,
        y=y_val,
        C=col,
        cmap = "Purples",
        xlabel="Year",
        ylabel="Year by Quarter",
        title=title_heatmap,
        width=1000,
        height=500
    ).aggregate(
        function=np.mean
    )

    """ FORECAST """
    # Prep the data
    df_crypto_noindex_prophet = df_crypto_index.reset_index()

    # rename the columnas as part of the prep-work
    df_crypto_noindex_prophet.columns = ['ds', 'y']

    # Are there any nulls?
    df_crypto_noindex_prophet = df_crypto_noindex_prophet.dropna()

    # Remove Time Zone
    df_crypto_noindex_prophet['ds'] = df_crypto_noindex_prophet['ds'].dt.tz_localize(None)

    # Create the Model
    m_crypto = Prophet()

    # Fit Model
    m_crypto.fit(df_crypto_noindex_prophet)

    # Setup Predictions
    future_crypto = m_crypto.make_future_dataframe(periods=forecast_period, freq='D')

    # Make Predictions
    forecast_crypto = m_crypto.predict(future_crypto)

    # plot the forecast
    hv.extension('bokeh')
    plt = m_crypto.plot(
        forecast_crypto,
        xlabel="Time Line - (ds)",
        ylabel=f"Prediction: {TITLE_DICT[col]} - (y)",
        figsize=(16,8),
    )

    """ ACTUAL price prediction for the Forecast range (set in variable declaration) ... in case we want to show """
    forecast_crypto[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(forecast_period)

    return forecast_crypto, df_crypto_noindex_prophet


def ml_apply(pickled_model: str):
    with open(pickled_model, 'rb') as f:
        forecast = pickle.load(f)

    breakpoint()

    gh = 1

    return forecast

